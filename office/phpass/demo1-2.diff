diff -urp demo1/user-man.php demo2/user-man.php
--- demo1/user-man.php	2010-04-09 08:52:14 +0000
+++ demo2/user-man.php	2010-04-18 05:52:01 +0000
@@ -14,20 +14,43 @@ $hash_cost_log2 = 8;
 // Do we require the hashes to be portable to older systems (less secure)?
 $hash_portable = FALSE;
 
+// Are we debugging this code?  If enabled, OK to leak server setup details.
+$debug = TRUE;
+
 function fail($pub, $pvt = '')
 {
+	global $debug;
 	$msg = $pub;
-	if ($pvt !== '')
+	if ($debug && $pvt !== '')
 		$msg .= ": $pvt";
+/* The $pvt debugging messages may contain characters that would need to be
+ * quoted if we were producing HTML output, like we would be in a real app,
+ * but we're using text/plain here.  Also, $debug is meant to be disabled on
+ * a "production install" to avoid leaking server setup details. */
 	exit("An error occurred ($msg).\n");
 }
 
-header('Content-Type: text/plain');
+function get_post_var($var)
+{
+	$val = $_POST[$var];
+	if (get_magic_quotes_gpc())
+		$val = stripslashes($val);
+	return $val;
+}
 
-$user = $_POST['user'];
-$pass = $_POST['pass'];
+header('Content-Type: text/plain');
 
-// Should validate the username length and syntax here
+$user = get_post_var('user');
+/* Sanity-check the username, don't rely on our use of prepared statements
+ * alone to prevent attacks on the SQL server via malicious usernames. */
+if (!preg_match('/^[a-zA-Z0-9_]{1,60}$/', $user))
+	fail('Invalid username');
+
+$pass = get_post_var('pass');
+/* Don't let them spend more of our CPU time than we were willing to.
+ * Besides, bcrypt happens to use the first 72 characters only anyway. */
+if (strlen($pass) > 72)
+	fail('The supplied password is too long');
 
 $db = new mysqli($db_host, $db_user, $db_pass, $db_name, $db_port);
 if (mysqli_connect_errno())
@@ -43,8 +66,17 @@ unset($hasher);
 	|| fail('MySQL prepare', $db->error);
 $stmt->bind_param('ss', $user, $hash)
 	|| fail('MySQL bind_param', $db->error);
-$stmt->execute()
-	|| fail('MySQL execute', $db->error);
+if (!$stmt->execute()) {
+/* Figure out why this failed - maybe the username is already taken?
+ * It could be more reliable/portable to issue a SELECT query here.  We would
+ * definitely need to do that (or at least include code to do it) if we were
+ * supporting multiple kinds of database backends, not just MySQL.  However,
+ * the prepared statements interface we're using is MySQL-specific anyway. */
+	if ($db->errno === 1062 /* ER_DUP_ENTRY */)
+		fail('This username is already taken');
+	else
+		fail('MySQL execute', $db->error);
+}
 
 $stmt->close();
 $db->close();
diff -urp demo1/user-man.sql demo2/user-man.sql
--- demo1/user-man.sql	2010-04-08 23:41:52 +0000
+++ demo2/user-man.sql	2010-04-07 02:13:14 +0000
@@ -1,3 +1,3 @@
 create database myapp;
 use myapp;
-create table users (user varchar(60), pass varchar(60));
+create table users (user varchar(60), pass varchar(60), unique (user));
